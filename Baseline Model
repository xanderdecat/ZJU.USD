import os
import xml.etree.ElementTree as ET
from PIL import Image
import matplotlib.pyplot as plt
from mtcnn import MTCNN
import cv2


## PART 1: DETECTING FACES

# Directory paths
image_dir = "XXX...XXX"
annot_dir = "XXX...XXX"

# Parse XML and retrieve bounding boxes
def parse_annotation(annot_path):
    tree = ET.parse(annot_path)
    root = tree.getroot()
    boxes = []
    for object in root.findall('object'):
        name = object.find('name').text
        bndbox = object.find('bndbox')
        xmin = int(bndbox.find('xmin').text)
        ymin = int(bndbox.find('ymin').text)
        xmax = int(bndbox.find('xmax').text)
        ymax = int(bndbox.find('ymax').text)
        boxes.append((name, (xmin, ymin, xmax, ymax)))
    return boxes

# Test by displaying a random image with its bounding boxes
image_path = os.path.join(image_dir, "maksssksksss40.png")
image = Image.open(image_path)

boxes = parse_annotation(os.path.join(annot_dir, "maksssksksss40.xml"))
fig, ax = plt.subplots(1)
ax.imshow(image)
for box in boxes:
    rect = plt.Rectangle((box[1][0], box[1][1]), box[1][2] - box[1][0], box[1][3] - box[1][1], linewidth=1, edgecolor='r', facecolor='none')
    ax.add_patch(rect)
    ax.text(box[1][0], box[1][1] - 5, box[0], color='red')
plt.show()


## PART 2: DETECTING MASKS

# PREPARE THE DATASET
import numpy as np
from keras.utils import to_categorical

# Convert labels to integers
label2int = {
    "with_mask": 0,
    "without_mask": 1,
    "mask_worn_incorrectly": 2,
    "mask_weared_incorrect": 2  # Adding this line
}

# Prepare dataset
X = []
y = []

for index in range(853):
    image_path = os.path.join(image_dir, f"maksssksksss{index}.png")
    image = Image.open(image_path).convert('RGB')

    boxes = parse_annotation(os.path.join(annot_dir, f"maksssksksss{index}.xml"))
    for box in boxes:
        face_image = image.crop(box[1])
        face_image = face_image.resize((50, 50))  # Resize for the model
        X.append(np.array(face_image))
        y.append(label2int[box[0]])

X = np.array(X) / 255.0  # Normalize data
y = to_categorical(y, num_classes=3)

# MODEL TRAINING
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(50, 50, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(X, y, epochs=10, validation_split=0.1, batch_size=32)



## TESTPHASE

# Imagename to test
test_image_name = ("Testphoto5.jpg")

# Load the image
test_image_path = "XXX...XXX" + test_image_name
test_image = Image.open(test_image_path)

plt.imshow(test_image)
plt.title("Test Image")
plt.show()

# Detect faces using MTCNN
detector = MTCNN()

# Convert PIL image to numpy array for face detection
test_np = np.array(test_image)

# Detect faces
faces = detector.detect_faces(test_np)

# Draw rectangles around the faces
for face in faces:
    x, y, w, h = face['box']
    cv2.rectangle(test_np, (x, y), (x+w, y+h), (255, 0, 0), 2)

plt.imshow(cv2.cvtColor(test_np, cv2.COLOR_BGR2RGB))
plt.title("Detected Faces")
plt.show()

# Predict mask status
for face in faces:
    x, y, w, h = face['box']
    face_img = test_image.crop((x, y, x+w, y+h))
    face_img = face_img.resize((50, 50))
    face_arr = np.expand_dims(np.array(face_img) / 255.0, axis=0)

    prediction = model.predict(face_arr)
    mask_status = np.argmax(prediction)

    if mask_status == 0:
        label = "With mask"
    elif mask_status == 1:
        label = "Without mask"
    else:
        label = "Mask worn incorrectly"

    cv2.putText(test_np, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
    cv2.rectangle(test_np, (x, y), (x+w, y+h), (255, 0, 0), 2)

plt.imshow(cv2.cvtColor(test_np, cv2.COLOR_BGR2RGB))
plt.title("Mask Detection Result")
plt.show()
